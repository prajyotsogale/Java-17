-------------- Object Oriented Programming--------------------------------

real world object based programming 
look around you, you will find many real world objects 
for example, i can see
	-computer
	-mouse
	-earphones
	-laptop
	-door


the real world objects have two major components
	-state
	-behaviors


for an ant the state might be
	-the age
	-the conscious state
	-the number of legs
	-whether the ant is sleep or awake
for an ant the behaviour might be
	-eating 
	-drinking 
	-fighting
	-carrying food those types of things


think of a class as blueprint or template for creating objects



When you are creating classes in java the first letter should be in upper case letter


The class describes the date(fields), and the behaviour(methods), that are relavent to the 
real world objects we want to describe.

if a field is static, there is only one copy in the memory, and this value is associated with 
the class, or template, itself.
if a field is not static, it's called an instance field, and each object may have a different value
stored for the field.
A static method can't be dependent on any one object's state, so it can't reference any instance member.
on other words, any method that operates on instance field, needs to be non-static.


The classes can be organized into logical groupings, which are called packages.
You declare the package name in the class using package statement.
if you don't declare a package, the class implicitly belongs to the default package.

A class is said to be top-level class, if it is defined in the source code file, and not enclosed 
in the code block of another class, type or method.

A top-level class has only two valid access modifiers.
public - means any other class in any package can access the package.
       - When the modifier is omitted, this has special meaning, called package access, meaning 
         the class is accessible only to classes in the same package.




Access modifiers at member level.
public     - means any other class in any package can access this class.
protected  - protected allows classes in the same packages, and any subclasses in other packages
			 to have access to the members.

		   - When the modifier is omitted, this has special meaning, called package access,
		     meaning the member is accessible only to classes in the same package.

private    - means that no other class can access this member.


Encapulation in Object Oriented Programming usually has two meanings.
One is the bundling of behaviour and attributes on a single objects.
The other is the practice of hiding fields, and some methods, from public access.


Fields with primitive datatypes are never null	

Fields on classes are assigned dafault values, intrinsically by java, if assigned explicitly.


bolean   -  false

byte
short 
int      - 0
long
char 

float   - 0.0 
double  - 0.0


What are getters and setters? and why should we use them
A getter is the method on a class, that retrives the value of a private field, and returns it.
A setter is a method on a class, that sets the value of a private field.
The purpose of these methods is to control, and pritect, access to private field.


-------------------------This----------------------------

THIS is a special keyword in java.
What it really refers to is the instance that was created when the object was instantiated.
So 'this' is the special reference name for the object or instance, which it can use to describe itself.

And we can use this to access fields on the class.

"operator, we want to specify that the make field we want to use, to assign a value to,

is the make field on the object, and not the make method parameter."


----------------------------Getters and Setters Methods------------------------------
getter = a method that allows you to access an attribute in a given class
setters = a method that allows to set or mutate the value of an attribute in a given class

constructor is used in the creation of an object, that's an instance of a class
coustructor is a method with no return parameters.
we can also pass arguments if we want in it.

if a class has no constructor, then a default constructor is implicitly declared by java.
constructor with no parameters is called no-args constructor.

constructor chaining is when one constructor explicitly calls another overloaded constructor.
we can we this() method in every constructor to call another constructor and pass value.



------------------------------------------------------------------------------------------------
class  -  class is an blueprint or template to create an object.
					it defines properties(fields) and behaviours(methods) that the object of that class will
					have.
					eg - car class might have properties like model or speed and behaviours like
					      drive(), stop()

object  -  an object is an instance of a class. It has its own unique states, values or attributes
					 eg - using car class example, its ojects can be "Toyota camery" with "red" color
					 and "60" kmph speed.

instance - uses interchangebaly with object.

reference  - reference in java is like a pointer to an object. It doesn't contain actual object
						 itself, but rather the address(memory location) where the object resides.


--------------------------------------Static keyword---------------------------------------------

Every instance of a class shares the same static variable
So if changes are made to that variable, all other instances of the class will see the effect 
of that changes.

it is considered best practice to use class name instead of its reference for static variable 
to avoid confusion.

uses
Storing counters
Generating unique ids
Storing a constant value that doesn't change,pi.
creating, and controlling access, to a shared resources.


instance variables--
they belongs to the specific instances of a class
they don't use static keyword
known as fields, member variables.
every instance can have specific value






------------------------------------------------------------------------------------------

Inside a static method we can't use static method

Static methods are called using
ClassName.methodName(); or
methodName() if it is in same class

eg- 
Calculator.printSum(5,6);
printHello();

----------  
but to use instance of a class 
we have to instantiate the class first, usually by using "new" keyword.


tree 
																		should a method
																		be static?
																						|
																						|
															does it uses any fields(instance
															variables) or instance methods
														   /  											  \
													    /												     \
											    	YES                            NO
											    	|                               |
											    	|                               |
						        it should be an                  it should be a 
						        instance method                  Static method




---------------------------------------------POJO-----------------------------------------
plain old java object is a class that generally has instance fields
it is used to house data, pass data, between functional classes
Many databases use pojo to read data from, or to write data to, databases, files or streams

javabean is jsut a pojo with some extra rules applied to it.

Annotations are a type of metadata.
Metadata is a way of formally describing additional information about our code
Annotations are more structured, and have more meaning, than comments
this is because they can be used by the compiler, or other types of pre-processing
functions, to get information about the code.
Metadata doesn't effect how the code runs, so this code will still run, with or without the
annotation.


An overridden method is a special method in Java, that other classes can implement,if they
use specified method signature.

						        








